// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: repo.sql

package db

import (
	"context"
)

const createRepo = `-- name: CreateRepo :one
INSERT INTO repo(org, name, id )
VALUES 
  ($1, $2, $3)
RETURNING id, org, name
`

type CreateRepoParams struct {
	Org  string `json:"org"`
	Name string `json:"name"`
	ID   int32  `json:"id"`
}

func (q *Queries) CreateRepo(ctx context.Context, arg CreateRepoParams) (Repo, error) {
	row := q.db.QueryRow(ctx, createRepo, arg.Org, arg.Name, arg.ID)
	var i Repo
	err := row.Scan(&i.ID, &i.Org, &i.Name)
	return i, err
}

const deleteRepo = `-- name: DeleteRepo :exec
DELETE FROM repo
WHERE id = $1
`

func (q *Queries) DeleteRepo(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRepo, id)
	return err
}

const getRepo = `-- name: GetRepo :one
SELECT id, org, name FROM repo
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRepo(ctx context.Context, id int32) (Repo, error) {
	row := q.db.QueryRow(ctx, getRepo, id)
	var i Repo
	err := row.Scan(&i.ID, &i.Org, &i.Name)
	return i, err
}

const getRepoForUpdate = `-- name: GetRepoForUpdate :one
SELECT id, org, name FROM repo
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetRepoForUpdate(ctx context.Context, id int32) (Repo, error) {
	row := q.db.QueryRow(ctx, getRepoForUpdate, id)
	var i Repo
	err := row.Scan(&i.ID, &i.Org, &i.Name)
	return i, err
}

const getRepos = `-- name: GetRepos :many
SELECT id, org, name FROM repo
ORDER BY org, name
`

func (q *Queries) GetRepos(ctx context.Context) ([]Repo, error) {
	rows, err := q.db.Query(ctx, getRepos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Repo{}
	for rows.Next() {
		var i Repo
		if err := rows.Scan(&i.ID, &i.Org, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRepoName = `-- name: UpdateRepoName :one
UPDATE repo
SET name = $2
WHERE id = $1
RETURNING id, org, name
`

type UpdateRepoNameParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateRepoName(ctx context.Context, arg UpdateRepoNameParams) (Repo, error) {
	row := q.db.QueryRow(ctx, updateRepoName, arg.ID, arg.Name)
	var i Repo
	err := row.Scan(&i.ID, &i.Org, &i.Name)
	return i, err
}

const updateRepoOrg = `-- name: UpdateRepoOrg :one
UPDATE repo
SET org = $2
WHERE id = $1
RETURNING id, org, name
`

type UpdateRepoOrgParams struct {
	ID  int32  `json:"id"`
	Org string `json:"org"`
}

func (q *Queries) UpdateRepoOrg(ctx context.Context, arg UpdateRepoOrgParams) (Repo, error) {
	row := q.db.QueryRow(ctx, updateRepoOrg, arg.ID, arg.Org)
	var i Repo
	err := row.Scan(&i.ID, &i.Org, &i.Name)
	return i, err
}
