// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: gh_user.sql

package db

import (
	"context"
)

const createGithubUser = `-- name: CreateGithubUser :one
INSERT INTO gh_user(id, login)
VALUES 
  ($1, $2)
RETURNING id, login
`

type CreateGithubUserParams struct {
	ID    int32  `json:"id"`
	Login string `json:"login"`
}

func (q *Queries) CreateGithubUser(ctx context.Context, arg CreateGithubUserParams) (GhUser, error) {
	row := q.db.QueryRow(ctx, createGithubUser, arg.ID, arg.Login)
	var i GhUser
	err := row.Scan(&i.ID, &i.Login)
	return i, err
}

const deleteGithubUser = `-- name: DeleteGithubUser :exec
DELETE FROM gh_user
WHERE id = $1
`

func (q *Queries) DeleteGithubUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteGithubUser, id)
	return err
}

const getGithubUser = `-- name: GetGithubUser :one
SELECT id, login FROM gh_user
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetGithubUser(ctx context.Context, id int32) (GhUser, error) {
	row := q.db.QueryRow(ctx, getGithubUser, id)
	var i GhUser
	err := row.Scan(&i.ID, &i.Login)
	return i, err
}

const getGithubUsers = `-- name: GetGithubUsers :many
SELECT id, login FROM gh_user
ORDER BY login
`

func (q *Queries) GetGithubUsers(ctx context.Context) ([]GhUser, error) {
	rows, err := q.db.Query(ctx, getGithubUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GhUser{}
	for rows.Next() {
		var i GhUser
		if err := rows.Scan(&i.ID, &i.Login); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
