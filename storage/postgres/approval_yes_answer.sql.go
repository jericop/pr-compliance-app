// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: approval_yes_answer.sql

package postgres

import (
	"context"
)

const createApprovalYesAnswer = `-- name: CreateApprovalYesAnswer :one
INSERT INTO approval_yes_answer (approval_id, question_id)
VALUES 
  ($1, $2)
RETURNING approval_id, question_id
`

type CreateApprovalYesAnswerParams struct {
	ApprovalID int32 `json:"approval_id"`
	QuestionID int32 `json:"question_id"`
}

func (q *Queries) CreateApprovalYesAnswer(ctx context.Context, arg CreateApprovalYesAnswerParams) (ApprovalYesAnswer, error) {
	row := q.db.QueryRow(ctx, createApprovalYesAnswer, arg.ApprovalID, arg.QuestionID)
	var i ApprovalYesAnswer
	err := row.Scan(&i.ApprovalID, &i.QuestionID)
	return i, err
}

const createApprovalYesAnswerByUuid = `-- name: CreateApprovalYesAnswerByUuid :one
INSERT INTO approval_yes_answer (approval_id, question_id)
VALUES 
  ((SELECT id from approval WHERE uuid = $1), $2)
RETURNING approval_id, question_id
`

type CreateApprovalYesAnswerByUuidParams struct {
	Uuid       string `json:"uuid"`
	QuestionID int32  `json:"question_id"`
}

func (q *Queries) CreateApprovalYesAnswerByUuid(ctx context.Context, arg CreateApprovalYesAnswerByUuidParams) (ApprovalYesAnswer, error) {
	row := q.db.QueryRow(ctx, createApprovalYesAnswerByUuid, arg.Uuid, arg.QuestionID)
	var i ApprovalYesAnswer
	err := row.Scan(&i.ApprovalID, &i.QuestionID)
	return i, err
}

const deleteApprovalYesAnswer = `-- name: DeleteApprovalYesAnswer :exec
DELETE FROM approval_yes_answer
WHERE approval_id = $1 AND question_id = $2
`

type DeleteApprovalYesAnswerParams struct {
	ApprovalID int32 `json:"approval_id"`
	QuestionID int32 `json:"question_id"`
}

func (q *Queries) DeleteApprovalYesAnswer(ctx context.Context, arg DeleteApprovalYesAnswerParams) error {
	_, err := q.db.Exec(ctx, deleteApprovalYesAnswer, arg.ApprovalID, arg.QuestionID)
	return err
}

const deleteApprovalYesAnswerByUuid = `-- name: DeleteApprovalYesAnswerByUuid :exec
DELETE FROM approval_yes_answer
WHERE question_id = $2 AND
  approval_id = (SELECT id from approval WHERE uuid = $1)
`

type DeleteApprovalYesAnswerByUuidParams struct {
	Uuid       string `json:"uuid"`
	QuestionID int32  `json:"question_id"`
}

func (q *Queries) DeleteApprovalYesAnswerByUuid(ctx context.Context, arg DeleteApprovalYesAnswerByUuidParams) error {
	_, err := q.db.Exec(ctx, deleteApprovalYesAnswerByUuid, arg.Uuid, arg.QuestionID)
	return err
}
