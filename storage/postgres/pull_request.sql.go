// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: pull_request.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPullRequest = `-- name: CreatePullRequest :one
INSERT INTO pull_request(repo_id, pr_id, pr_number, opened_by, is_merged)
VALUES 
  ($1, $2, $3, $4, $5)
RETURNING id, repo_id, pr_id, pr_number, opened_by, is_merged
`

type CreatePullRequestParams struct {
	RepoID   pgtype.Int4 `json:"repo_id"`
	PrID     int32       `json:"pr_id"`
	PrNumber int32       `json:"pr_number"`
	OpenedBy pgtype.Int4 `json:"opened_by"`
	IsMerged pgtype.Bool `json:"is_merged"`
}

func (q *Queries) CreatePullRequest(ctx context.Context, arg CreatePullRequestParams) (PullRequest, error) {
	row := q.db.QueryRow(ctx, createPullRequest,
		arg.RepoID,
		arg.PrID,
		arg.PrNumber,
		arg.OpenedBy,
		arg.IsMerged,
	)
	var i PullRequest
	err := row.Scan(
		&i.ID,
		&i.RepoID,
		&i.PrID,
		&i.PrNumber,
		&i.OpenedBy,
		&i.IsMerged,
	)
	return i, err
}

const deletePullRequest = `-- name: DeletePullRequest :exec
DELETE FROM pull_request
WHERE id = $1
`

func (q *Queries) DeletePullRequest(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePullRequest, id)
	return err
}

const getPullRequest = `-- name: GetPullRequest :one
SELECT id, repo_id, pr_id, pr_number, opened_by, is_merged FROM pull_request
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPullRequest(ctx context.Context, id int32) (PullRequest, error) {
	row := q.db.QueryRow(ctx, getPullRequest, id)
	var i PullRequest
	err := row.Scan(
		&i.ID,
		&i.RepoID,
		&i.PrID,
		&i.PrNumber,
		&i.OpenedBy,
		&i.IsMerged,
	)
	return i, err
}

const getPullRequestForUpdate = `-- name: GetPullRequestForUpdate :one
SELECT id, repo_id, pr_id, pr_number, opened_by, is_merged FROM pull_request
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetPullRequestForUpdate(ctx context.Context, id int32) (PullRequest, error) {
	row := q.db.QueryRow(ctx, getPullRequestForUpdate, id)
	var i PullRequest
	err := row.Scan(
		&i.ID,
		&i.RepoID,
		&i.PrID,
		&i.PrNumber,
		&i.OpenedBy,
		&i.IsMerged,
	)
	return i, err
}

const getPullRequests = `-- name: GetPullRequests :many
SELECT id, repo_id, pr_id, pr_number, opened_by, is_merged FROM pull_request
`

func (q *Queries) GetPullRequests(ctx context.Context) ([]PullRequest, error) {
	rows, err := q.db.Query(ctx, getPullRequests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PullRequest{}
	for rows.Next() {
		var i PullRequest
		if err := rows.Scan(
			&i.ID,
			&i.RepoID,
			&i.PrID,
			&i.PrNumber,
			&i.OpenedBy,
			&i.IsMerged,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePullRequestIsMerged = `-- name: UpdatePullRequestIsMerged :one
UPDATE pull_request
SET is_merged = $2
WHERE id = $1
RETURNING id, repo_id, pr_id, pr_number, opened_by, is_merged
`

type UpdatePullRequestIsMergedParams struct {
	ID       int32       `json:"id"`
	IsMerged pgtype.Bool `json:"is_merged"`
}

func (q *Queries) UpdatePullRequestIsMerged(ctx context.Context, arg UpdatePullRequestIsMergedParams) (PullRequest, error) {
	row := q.db.QueryRow(ctx, updatePullRequestIsMerged, arg.ID, arg.IsMerged)
	var i PullRequest
	err := row.Scan(
		&i.ID,
		&i.RepoID,
		&i.PrID,
		&i.PrNumber,
		&i.OpenedBy,
		&i.IsMerged,
	)
	return i, err
}
