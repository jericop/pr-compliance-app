// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: installation.sql

package postgres

import (
	"context"
)

const createInstallation = `-- name: CreateInstallation :one
INSERT INTO installation(id)
VALUES 
  ($1)
RETURNING id
`

func (q *Queries) CreateInstallation(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, createInstallation, id)
	err := row.Scan(&id)
	return id, err
}

const deleteInstallation = `-- name: DeleteInstallation :exec
DELETE FROM installation
WHERE id = $1
`

func (q *Queries) DeleteInstallation(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteInstallation, id)
	return err
}

const getInstallation = `-- name: GetInstallation :one
SELECT id FROM installation
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetInstallation(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, getInstallation, id)
	err := row.Scan(&id)
	return id, err
}

const getInstallations = `-- name: GetInstallations :many
SELECT id FROM installation
`

func (q *Queries) GetInstallations(ctx context.Context) ([]int32, error) {
	rows, err := q.db.Query(ctx, getInstallations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int32{}
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
